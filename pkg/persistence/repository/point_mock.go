// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/persistence/repository/point.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "ms/spatial/pkg/persistence/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPoints is a mock of Points interface.
type MockPoints struct {
	ctrl     *gomock.Controller
	recorder *MockPointsMockRecorder
}

// MockPointsMockRecorder is the mock recorder for MockPoints.
type MockPointsMockRecorder struct {
	mock *MockPoints
}

// NewMockPoints creates a new mock instance.
func NewMockPoints(ctrl *gomock.Controller) *MockPoints {
	mock := &MockPoints{ctrl: ctrl}
	mock.recorder = &MockPointsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoints) EXPECT() *MockPointsMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockPoints) FindAll() ([]*entity.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entity.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPointsMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPoints)(nil).FindAll))
}
